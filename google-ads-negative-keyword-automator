// =====================================
// USER CONFIGURATION - Edit these values
// =====================================
const USER_SETTINGS = {
  // Choose ONE of these filtering methods by filling it in (leave the other empty):
  campaignNames: [],  // Example: ['Black_Friday_Shopping', 'Christmas_Sale']
  campaignLabel: '',  // Example: 'NegativeKeywordAutomation'
  
  campaignType: 'SHOPPING',  // Use 'SHOPPING' or 'SEARCH'
  daysToAnalyze: 30,  // Choose from: 7, 14, 30, 60, or 90 days
  
  // Keyword filtering rules
  keywordRules: {
    // Terms to always preserve (never add as negative)
    preserveTerms: [],  // Example: ['brand', 'product']
    
    // Terms that should trigger a negative keyword
    // If ANY of these appear in search term, it will be added as negative
    negativeTerms: [],  // Example: ['cheap', 'free', 'diy']
    
    // Alternatively, you can specify terms that MUST appear
    // If search term doesn't contain ANY of these, it will be added as negative
    requiredTerms: [],  // Example: ['professional', 'premium']
    
    // Note: Use either negativeTerms OR requiredTerms, not both
    // Leave the array empty [] if you don't want to use that rule type
  }
};
// =====================================

// Script configuration - Don't edit below this line
const VALID_DAYS = [7, 14, 30, 60, 90];

const CONFIG = {
  baseListName: "Account Negative Keywords List",
  maxKeywordsPerList: 5000,
  maxLists: 3,
  batchSize: 200,
  campaignConfig: {
    names: USER_SETTINGS.campaignNames,
    label: USER_SETTINGS.campaignLabel,
    type: USER_SETTINGS.campaignType,
    get dateRange() {
      if (!VALID_DAYS.includes(USER_SETTINGS.daysToAnalyze)) {
        throw new Error(`Invalid days setting. Please choose from: ${VALID_DAYS.join(', ')} days`);
      }
      return `LAST_${USER_SETTINGS.daysToAnalyze}_DAYS`;
    }
  },
  keywordRules: USER_SETTINGS.keywordRules
};

function main() {
  try {
    // Validate settings
    validateUserSettings();
    
    var listIndex = 1;
    var negativeKeywordList = getNegativeKeywordListByName(CONFIG.baseListName + listIndex);
    
    while (negativeKeywordList && countNegativeKeywords(negativeKeywordList) >= CONFIG.maxKeywordsPerList) {
      listIndex++;
      if (listIndex > CONFIG.maxLists) {
        Logger.log("Error: All negative keyword lists are full.");
        return;
      }
      negativeKeywordList = getNegativeKeywordListByName(CONFIG.baseListName + listIndex);
    }
    
    if (!negativeKeywordList) {
      Logger.log("Error: Negative keyword list '" + CONFIG.baseListName + listIndex + "' not found.");
      return;
    }
    
    var report = generateReport(CONFIG.campaignConfig);
    var rows = report.rows();
    var searchTerms = [];
    while (rows.hasNext()) {
      var row = rows.next();
      searchTerms.push(row['Query']);
    }
    
    searchTerms = shuffleArray(searchTerms);
    
    var negativeKeywords = [];
    var processedTerms = 0;

    for (var i = 0; i < searchTerms.length && processedTerms < CONFIG.batchSize; i++) {
      var searchTerm = searchTerms[i];
      
      if (!shouldKeep(searchTerm, CONFIG.keywordRules)) {
        var truncatedTerm = truncateSearchTerm(searchTerm);
        if (truncatedTerm && !negativeKeywords.includes(truncatedTerm)) {
          negativeKeywords.push(truncatedTerm);
        }
      }
      
      processedTerms++;
    }
    
    if (negativeKeywords.length > 0) {
      addNegativeKeywordsToList(negativeKeywordList, negativeKeywords, CONFIG.baseListName, listIndex, CONFIG.maxKeywordsPerList);
      Logger.log("Added " + negativeKeywords.length + " negative keywords. Total processed: " + processedTerms);
    } else {
      Logger.log("No negative keywords to add.");
    }
    
    Logger.log("Script completed successfully. Total search terms processed: " + processedTerms);
  } catch (e) {
    Logger.log("An error occurred: " + e.toString());
  }
}

function validateUserSettings() {
  // Validate campaign filtering method
  if (USER_SETTINGS.campaignNames.length > 0 && USER_SETTINGS.campaignLabel) {
    throw new Error("Please use either campaignNames or campaignLabel, not both");
  }
  
  if (!USER_SETTINGS.campaignNames.length && !USER_SETTINGS.campaignLabel) {
    throw new Error("Please specify either campaignNames or campaignLabel");
  }
  
  // Validate campaign type
  if (!['SHOPPING', 'SEARCH'].includes(USER_SETTINGS.campaignType)) {
    throw new Error("Campaign type must be either 'SHOPPING' or 'SEARCH'");
  }
  
  // Validate days to analyze
  if (!VALID_DAYS.includes(USER_SETTINGS.daysToAnalyze)) {
    throw new Error(`Invalid days setting. Please choose from: ${VALID_DAYS.join(', ')} days`);
  }
  
  // Validate keyword rules
  const rules = USER_SETTINGS.keywordRules;
  if (!rules) {
    throw new Error("Keyword rules must be specified in USER_SETTINGS.keywordRules");
  }
  
  if (rules.negativeTerms.length > 0 && rules.requiredTerms.length > 0) {
    throw new Error("Please use either negativeTerms OR requiredTerms, not both");
  }
  
  if (rules.negativeTerms.length === 0 && rules.requiredTerms.length === 0) {
    throw new Error("Please specify either negativeTerms or requiredTerms");
  }
}

function shouldKeep(searchTerm, rules) {
  const lowerCaseTerm = searchTerm.toLowerCase();
  
  // First check preserve terms - these override all other rules
  if (rules.preserveTerms.length > 0) {
    if (rules.preserveTerms.some(term => 
      lowerCaseTerm.includes(term.toLowerCase()))) {
      return true;
    }
  }
  
  // If using negative terms: keep unless it contains any negative term
  if (rules.negativeTerms.length > 0) {
    return !rules.negativeTerms.some(term => 
      lowerCaseTerm.includes(term.toLowerCase()));
  }
  
  // If using required terms: keep only if it contains at least one required term
  if (rules.requiredTerms.length > 0) {
    return rules.requiredTerms.some(term => 
      lowerCaseTerm.includes(term.toLowerCase()));
  }
  
  // If no filtering rules specified, log warning and keep the term
  Logger.log("Warning: No keyword rules specified. Please set either negativeTerms or requiredTerms.");
  return true;
}

function generateReport(campaignConfig) {
  var reportQuery = "SELECT Query FROM ";
  
  // Choose report type based on campaign type
  reportQuery += campaignConfig.type === 'SHOPPING' 
    ? "SHOPPING_PERFORMANCE_REPORT "
    : "SEARCH_QUERY_PERFORMANCE_REPORT ";
    
  // Add campaign filtering conditions
  var conditions = [];
  
  // Filter by campaign names if specified
  if (campaignConfig.names && campaignConfig.names.length > 0) {
    conditions.push("CampaignName IN ['" + campaignConfig.names.join("','") + "']");
  }
  
  // Filter by campaign label if specified
  if (campaignConfig.label) {
    conditions.push("CampaignLabelNames CONTAINS_ANY ['" + campaignConfig.label + "']");
  }
  
  // Add WHERE clause if we have any conditions
  if (conditions.length > 0) {
    reportQuery += "WHERE " + conditions.join(" AND ") + " ";
  }
  
  reportQuery += "DURING " + campaignConfig.dateRange;
  
  return AdsApp.report(reportQuery);
}

function getNegativeKeywordListByName(listName) {
  var negativeKeywordLists = AdsApp.negativeKeywordLists()
    .withCondition("Name = '" + listName + "'")
    .get();
  
  if (negativeKeywordLists.hasNext()) {
    return negativeKeywordLists.next();
  } else {
    return null;
  }
}

function countNegativeKeywords(negativeKeywordList) {
  return negativeKeywordList.negativeKeywords().get().totalNumEntities();
}

function truncateSearchTerm(searchTerm) {
  var words = searchTerm.split(' ');
  if (words.length >= 10) {
    return words.slice(0, 9).join(' ');
  }
  return searchTerm;
}

function sanitizeKeyword(keyword) {
  return keyword.replace(/[^a-zA-Z0-9\s]/g, '');
}

function addNegativeKeywordsToList(negativeKeywordList, keywords, baseListName, listIndex, maxKeywordsPerList) {
  var currentList = negativeKeywordList;
  var currentIndex = listIndex;
  
  keywords.forEach(function(keyword) {
    try {
      var sanitizedKeyword = sanitizeKeyword(keyword);
      var exactMatchKeyword = "[" + sanitizedKeyword + "]";
      if (!isKeywordAlreadyExists(currentList, exactMatchKeyword)) {
        if (countNegativeKeywords(currentList) < maxKeywordsPerList) {
          currentList.addNegativeKeyword(exactMatchKeyword);
          Logger.log("Successfully added negative exact match keyword: " + exactMatchKeyword);
        } else {
          currentIndex++;
          if (currentIndex > CONFIG.maxLists) {
            Logger.log("Error: All negative keyword lists are full.");
            return;
          }
          currentList = getNegativeKeywordListByName(baseListName + currentIndex);
          if (currentList && countNegativeKeywords(currentList) < maxKeywordsPerList) {
            currentList.addNegativeKeyword(exactMatchKeyword);
            Logger.log("Successfully added negative exact match keyword to list " + currentIndex + ": " + exactMatchKeyword);
          } else {
            Logger.log("All negative keyword lists are full or the next list '" + baseListName + currentIndex + "' not found.");
            return;
          }
        }
      } else {
        Logger.log("Keyword already exists, skipping: " + exactMatchKeyword);
      }
    } catch (e) {
      Logger.log("Error adding negative keyword '" + keyword + "': " + e.toString());
    }
  });
}

function isKeywordAlreadyExists(negativeKeywordList, keyword) {
  var keywordIterator = negativeKeywordList.negativeKeywords()
    .withCondition("KeywordText = '" + keyword + "'")
    .get();
  return keywordIterator.hasNext();
}

function shuffleArray(array) {
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
  return array;
}
